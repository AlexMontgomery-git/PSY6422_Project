p1 <- plot_ly(dfp1, x = ~hero,
y = ~bronze_pick_rate,
name = "Bronze Pick Rate",
type = "bar",
width = 900,
height = 600,
#Set the colour of the first division and create a black line around each bar
marker = list(color = "#E0B5AC",
line = list(color = "#000000, 0.5)",
width = 1))) %>%
#Set the layout specifications of the visualisation
layout(title = "Hero Pick Rate by Division",
#Set the order of the heroes to be determined by the order they appear in the dataset
xaxis = list(categoryarray = ~hero,
categoryorder = "array",
#Set the x axis title and the angle and size of the labels for each hero
title = "Hero",
tickangle =270),
tickfont = list(size = 10),
#Set the y axis title, scale format, range and type of bar chart
yaxis = list(title = "Pick Rate",
tickformat = "%",
range = c(0, 0.70)),
barmode = "stack")
#Create a value containing the 6 divisions not yet plotted for use in a for loop
divplot <- colnames(dfp1[c(3:8)])
#Create a value for use in the add trace loop to set the colours for each division (colours match the exact hex codes that Overbuff assigned to each division)
colours <- c("#CAD6CC", "#EFEB8B", "#4E98BB", "#D9E8F3", "#EDA152", "#FEE072")
#Create a loop to add a trace for each of the remaining divisions
for(i in divplot){
p1 <- p1 %>% add_trace(x = dfp1[["hero"]],
y = dfp1[[i]],
#Replace "_" with " " and capitalise the division titles
name = gsub(x = i, pattern = "\\_", replacement = " ") %>% str_to_title(i),
#Change the colours of the divisions per the "colours" variable previously created
marker = list(color = colours[[match(i, divplot)]]))
}
#Display p1 visualisation
p1
#Save the visualisation
export(p1, file = "stacked_bar.png")
#Set the plot space and add the first division
p1 <- plot_ly(dfp1, x = ~hero,
y = ~bronze_pick_rate,
name = "Bronze Pick Rate",
type = "bar",
width = 900,
height = 600,
#Set the colour of the first division and create a black line around each bar
marker = list(color = "#E0B5AC",
line = list(color = "#000000, 0.5)",
width = 1))) %>%
#Set the layout specifications of the visualisation
layout(title = "Hero Pick Rate by Division",
#Set the order of the heroes to be determined by the order they appear in the dataset
xaxis = list(categoryarray = ~hero,
categoryorder = "array",
#Set the x axis title and the angle and size of the labels for each hero
title = "Hero",
tickangle =270),
tickfont = list(size = 10),
#Set the y axis title, scale format, range and type of bar chart
yaxis = list(title = "Pick Rate",
tickformat = "%",
range = c(0, 0.70)),
barmode = "stack")
#Create a value containing the 6 divisions not yet plotted for use in a for loop
divplot <- colnames(dfp1[c(3:8)])
#Create a value for use in the add trace loop to set the colours for each division (colours match the exact hex codes that Overbuff assigned to each division)
colours <- c("#CAD6CC", "#EFEB8B", "#4E98BB", "#D9E8F3", "#EDA152", "#FEE072")
#Create a loop to add a trace for each of the remaining divisions
for(i in divplot){
p1 <- p1 %>% add_trace(x = dfp1[["hero"]],
y = dfp1[[i]],
#Replace "_" with " " and capitalise the division titles
name = gsub(x = i, pattern = "\\_", replacement = " ") %>% str_to_title(i),
#Change the colours of the divisions per the "colours" variable previously created
marker = list(color = colours[[match(i, divplot)]]))
}
#Display p1 visualisation
p1
#Save the visualisation
plotly_IMAGE(p, width = 900, height = 600, format = "png", scale = 2,
out_file = "~visualisations/stacked_bar.png")
#Set the plot space and add the first division
p1 <- plot_ly(dfp1, x = ~hero,
y = ~bronze_pick_rate,
name = "Bronze Pick Rate",
type = "bar",
width = 900,
height = 600,
#Set the colour of the first division and create a black line around each bar
marker = list(color = "#E0B5AC",
line = list(color = "#000000, 0.5)",
width = 1))) %>%
#Set the layout specifications of the visualisation
layout(title = "Hero Pick Rate by Division",
#Set the order of the heroes to be determined by the order they appear in the dataset
xaxis = list(categoryarray = ~hero,
categoryorder = "array",
#Set the x axis title and the angle and size of the labels for each hero
title = "Hero",
tickangle =270),
tickfont = list(size = 10),
#Set the y axis title, scale format, range and type of bar chart
yaxis = list(title = "Pick Rate",
tickformat = "%",
range = c(0, 0.70)),
barmode = "stack")
#Create a value containing the 6 divisions not yet plotted for use in a for loop
divplot <- colnames(dfp1[c(3:8)])
#Create a value for use in the add trace loop to set the colours for each division (colours match the exact hex codes that Overbuff assigned to each division)
colours <- c("#CAD6CC", "#EFEB8B", "#4E98BB", "#D9E8F3", "#EDA152", "#FEE072")
#Create a loop to add a trace for each of the remaining divisions
for(i in divplot){
p1 <- p1 %>% add_trace(x = dfp1[["hero"]],
y = dfp1[[i]],
#Replace "_" with " " and capitalise the division titles
name = gsub(x = i, pattern = "\\_", replacement = " ") %>% str_to_title(i),
#Change the colours of the divisions per the "colours" variable previously created
marker = list(color = colours[[match(i, divplot)]]))
}
#Display p1 visualisation
p1
#Save the visualisation
plotly_IMAGE(p1, width = 900, height = 600, format = "png", scale = 2,
out_file = "~visualisations/stacked_bar.png")
#Set the plot space and add the first division
p1 <- plot_ly(dfp1, x = ~hero,
y = ~bronze_pick_rate,
name = "Bronze Pick Rate",
type = "bar",
width = 900,
height = 600,
#Set the colour of the first division and create a black line around each bar
marker = list(color = "#E0B5AC",
line = list(color = "#000000, 0.5)",
width = 1))) %>%
#Set the layout specifications of the visualisation
layout(title = "Hero Pick Rate by Division",
#Set the order of the heroes to be determined by the order they appear in the dataset
xaxis = list(categoryarray = ~hero,
categoryorder = "array",
#Set the x axis title and the angle and size of the labels for each hero
title = "Hero",
tickangle =270),
tickfont = list(size = 10),
#Set the y axis title, scale format, range and type of bar chart
yaxis = list(title = "Pick Rate",
tickformat = "%",
range = c(0, 0.70)),
barmode = "stack")
#Create a value containing the 6 divisions not yet plotted for use in a for loop
divplot <- colnames(dfp1[c(3:8)])
#Create a value for use in the add trace loop to set the colours for each division (colours match the exact hex codes that Overbuff assigned to each division)
colours <- c("#CAD6CC", "#EFEB8B", "#4E98BB", "#D9E8F3", "#EDA152", "#FEE072")
#Create a loop to add a trace for each of the remaining divisions
for(i in divplot){
p1 <- p1 %>% add_trace(x = dfp1[["hero"]],
y = dfp1[[i]],
#Replace "_" with " " and capitalise the division titles
name = gsub(x = i, pattern = "\\_", replacement = " ") %>% str_to_title(i),
#Change the colours of the divisions per the "colours" variable previously created
marker = list(color = colours[[match(i, divplot)]]))
}
#Display p1 visualisation
p1
#Save the visualisation
plotly_IMAGE(p1, width = 900, height = 600, format = "png", scale = 2,
out_file = "visualisations/stacked_bar.png")
plotly_IMAGE(p1, width = 900, height = 600, format = "png", scale = 2,
out_file = "visualisations/stacked_bar.png")
plotly_IMAGE(p1, width = 900, height = 600, format = "png", scale = 1,
out_file = "visualisations/stacked_bar.png")
plotly_IMAGE(p1, width = 900, height = 600, format = "png", scale = 1,
out_file = "~/visualisations/stacked_bar.png")
setwd("C:/Users/monty/OneDrive/Desktop/Masters/6422 Data Visualisation/PSY6422_Project")
plotly_IMAGE(p1, width = 900, height = 600, format = "png", scale = 1,
out_file = "visualisations/stacked_bar.png")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) #load tidyverse
library(plotly)    #load plotly for interactive graphing
#Load and Display the Overwatch logo
img1 <- "images/overwatch_logo.png"
knitr::include_graphics(img1)
#Load and Display the Overwatch logo
img2 <- "images/overbuff_visualisation.png"
knitr::include_graphics(img2)
#Load the data set
df = read.csv("hero_stats_3_months.csv")
#Check the data is as expected
head(df, 3)
#Transform original dataset to include only the heroes and pick rates for each division
dfp1 <- df %>% select(1, 2, 6, 10, 14, 18, 22, 26)
#Create a variable that is the sum of pick rates across all divisions so that visualisaion 1 can be ordered as desired
dfp1$totalpick <- rowSums(dfp1[,c(2:8)])
#Transform dfp1 to arrange heroes by total pick rate to create the desired order in the visualisation
dfp1 <- dfp1 %>% arrange(desc(totalpick))
#Check the data is as expected
head(dfp1, 5)
#Set the plot space and add the first division
p1 <- plot_ly(dfp1, x = ~hero,
y = ~bronze_pick_rate,
name = "Bronze Pick Rate",
type = "bar",
width = 900,
height = 600,
#Set the colour of the first division and create a black line around each bar
marker = list(color = "#E0B5AC",
line = list(color = "#000000, 0.5)",
width = 1))) %>%
#Set the layout specifications of the visualisation
layout(title = "Hero Pick Rate by Division",
#Set the order of the heroes to be determined by the order they appear in the dataset
xaxis = list(categoryarray = ~hero,
categoryorder = "array",
#Set the x axis title and the angle and size of the labels for each hero
title = "Hero",
tickangle =270),
tickfont = list(size = 10),
#Set the y axis title, scale format, range and type of bar chart
yaxis = list(title = "Pick Rate",
tickformat = "%",
range = c(0, 0.70)),
barmode = "stack")
#Create a value containing the 6 divisions not yet plotted for use in a for loop
divplot <- colnames(dfp1[c(3:8)])
#Create a value for use in the add trace loop to set the colours for each division (colours match the exact hex codes that Overbuff assigned to each division)
colours <- c("#CAD6CC", "#EFEB8B", "#4E98BB", "#D9E8F3", "#EDA152", "#FEE072")
#Create a loop to add a trace for each of the remaining divisions
for(i in divplot){
p1 <- p1 %>% add_trace(x = dfp1[["hero"]],
y = dfp1[[i]],
#Replace "_" with " " and capitalise the division titles
name = gsub(x = i, pattern = "\\_", replacement = " ") %>% str_to_title(i),
#Change the colours of the divisions per the "colours" variable previously created
marker = list(color = colours[[match(i, divplot)]]))
}
#Display p1 visualisation
p1
#Save the visualisation
#Transform the original data set to only include the heroes and pick rates for the lowest and highest divisions
dfp2 <- df %>% select(1, 2, 26)
#Pivot the data from wide to long to facilitate the ranking of heroes
dfp2 <- gather(dfp2, division, pick_rate, bronze_pick_rate, grandmaster_pick_rate, factor_key = TRUE)
#Create a new variable that ranks heroes based on their pick rate in each division
dfp2 <- dfp2 %>%
group_by(division) %>%
arrange(division, desc(pick_rate), hero) %>%
mutate(rank = row_number()) %>%
ungroup()
#Check the data is as expected
head(dfp2, 5)
#Set the plot space
p2 <- ggplot(dfp2, aes(x = division, y = rank, group = hero)) +
#Add a line for each hero and make it slightly transparent for better visability of crossing lines
geom_line(aes(color = hero, alpha = 1), size = 2) +
#Add a point for each hero to better clarify the start and end point of each line
geom_point(aes(color = hero, alpha = 1), size = 4) +
#Add a white dot in the middle of each point
geom_point(color = "#FFFFFF", size = 1) +
#Create geom_text to facilitate adding heroes names by their Bronze pick rate ranking
geom_text(data = dfp2 %>% filter(division == "bronze_pick_rate"),
#Add heroes names by their Bronze pick rate ranking
aes(label = hero, x = 0.8) , hjust = 0.5,
#Make the font bold, black and a specific size
fontface = "bold", color = "#000000", size = 4) +
#Create geom_text to facilitate adding heroes names by their Grandmaster pick rate ranking
geom_text(data = dfp2 %>% filter(division == "grandmaster_pick_rate"),
#Add heroes names by their Grandmaster pick rate ranking
aes(label = hero, x = 2.2) , hjust = 0.5,
#Make the font bold, black and a specific size
fontface = "bold", color = "#000000", size = 4) +
#Specify tick labels on the x axis
scale_x_discrete(labels = c("Bronze Pick Rate Rank", "Grandmaster Pick Rate Rank")) +
#Reverse the y axis scale to have the top heroes as the most picked and specify the scale to go from 1 to 32 in increments of 1
scale_y_reverse(breaks = 1:32) +
#Specify the size of the plot title and make it bold
theme(plot.title = element_text(size=16, face = "bold"),
#Specify the size of the tick labels on the x axis
axis.text.x = element_text(size=12),
#Specify the size of the axis titles and make them bold
axis.title = element_text(size=14,face = "bold"),
#Change the panelling on the plot to make it easy to compare across the visualisation
panel.grid.major.y = element_blank(),
#Remove the legend
legend.position = "none") +
#Specify the labels of the x and y axis
labs(x = "Division",
y = "Hero Rank",
#Specify the title and subtitle
title = "Overwatch Hero Pick Rate",
subtitle = "Heroes ranked by % pick rate in the lowest and highest divisions (Bronze and Grandmaster) over the last 3 months") +
#Specify the colours of the heroes lines to match the colour associated with each hero in Overwatch
scale_color_manual(values = c("#2178E9", "#67121D", "#3EA2CB", "#6E994D", "#F3B23A", "#FF7FD1", "#DDCCAC", "#04ADEF", "#84FE01", "#938848", "#D39308", "#8BEC22", "#C83C3C", "#9ADBF4", "#FFE16C", "#B3365D", "#BCC84A", "#2178E9", "#A49D86", "#AA958E", "#C19477", "#5DAB81", "#5D81EB", "#A07DC8", "#5CECFF", "#FF6200", "#F8911B", "#7878D4", "#8991A6", "#4D7883", "#F571A8", "#C79C00"))
#Display p2 visualisation
p2
#Save the visualisation
ggsave("visualisations/bump_chart.png")
#Set the plot space
p2 <- ggplot(dfp2, aes(x = division, y = rank, group = hero)) +
#Add a line for each hero and make it slightly transparent for better visability of crossing lines
geom_line(aes(color = hero, alpha = 1.1), size = 2) +
#Add a point for each hero to better clarify the start and end point of each line
geom_point(aes(color = hero, alpha = 1), size = 4) +
#Add a white dot in the middle of each point
geom_point(color = "#FFFFFF", size = 1) +
#Create geom_text to facilitate adding heroes names by their Bronze pick rate ranking
geom_text(data = dfp2 %>% filter(division == "bronze_pick_rate"),
#Add heroes names by their Bronze pick rate ranking
aes(label = hero, x = 0.8) , hjust = 0.5,
#Make the font bold, black and a specific size
fontface = "bold", color = "#000000", size = 4) +
#Create geom_text to facilitate adding heroes names by their Grandmaster pick rate ranking
geom_text(data = dfp2 %>% filter(division == "grandmaster_pick_rate"),
#Add heroes names by their Grandmaster pick rate ranking
aes(label = hero, x = 2.2) , hjust = 0.5,
#Make the font bold, black and a specific size
fontface = "bold", color = "#000000", size = 4) +
#Specify tick labels on the x axis
scale_x_discrete(labels = c("Bronze Pick Rate Rank", "Grandmaster Pick Rate Rank")) +
#Reverse the y axis scale to have the top heroes as the most picked and specify the scale to go from 1 to 32 in increments of 1
scale_y_reverse(breaks = 1:32) +
#Specify the size of the plot title and make it bold
theme(plot.title = element_text(size=16, face = "bold"),
#Specify the size of the tick labels on the x axis
axis.text.x = element_text(size=12),
#Specify the size of the axis titles and make them bold
axis.title = element_text(size=14,face = "bold"),
#Change the panelling on the plot to make it easy to compare across the visualisation
panel.grid.major.y = element_blank(),
#Remove the legend
legend.position = "none") +
#Specify the labels of the x and y axis
labs(x = "Division",
y = "Hero Rank",
#Specify the title and subtitle
title = "Overwatch Hero Pick Rate",
subtitle = "Heroes ranked by % pick rate in the lowest and highest divisions (Bronze and Grandmaster) over the last 3 months") +
#Specify the colours of the heroes lines to match the colour associated with each hero in Overwatch
scale_color_manual(values = c("#2178E9", "#67121D", "#3EA2CB", "#6E994D", "#F3B23A", "#FF7FD1", "#DDCCAC", "#04ADEF", "#84FE01", "#938848", "#D39308", "#8BEC22", "#C83C3C", "#9ADBF4", "#FFE16C", "#B3365D", "#BCC84A", "#2178E9", "#A49D86", "#AA958E", "#C19477", "#5DAB81", "#5D81EB", "#A07DC8", "#5CECFF", "#FF6200", "#F8911B", "#7878D4", "#8991A6", "#4D7883", "#F571A8", "#C79C00"))
#Display p2 visualisation
p2
#Save the visualisation
ggsave("visualisations/bump_chart.png")
#Set the plot space
p2 <- ggplot(dfp2, aes(x = division, y = rank, group = hero)) +
#Add a line for each hero and make it slightly transparent for better visability of crossing lines
geom_line(aes(color = hero, alpha = 1), size = 2) +
#Add a point for each hero to better clarify the start and end point of each line
geom_point(aes(color = hero, alpha = 1), size = 4) +
#Add a white dot in the middle of each point
geom_point(color = "#FFFFFF", size = 1) +
#Create geom_text to facilitate adding heroes names by their Bronze pick rate ranking
geom_text(data = dfp2 %>% filter(division == "bronze_pick_rate"),
#Add heroes names by their Bronze pick rate ranking
aes(label = hero, x = 0.8) , hjust = 0.5,
#Make the font bold, black and a specific size
fontface = "bold", color = "#000000", size = 4) +
#Create geom_text to facilitate adding heroes names by their Grandmaster pick rate ranking
geom_text(data = dfp2 %>% filter(division == "grandmaster_pick_rate"),
#Add heroes names by their Grandmaster pick rate ranking
aes(label = hero, x = 2.2) , hjust = 0.5,
#Make the font bold, black and a specific size
fontface = "bold", color = "#000000", size = 4) +
#Specify tick labels on the x axis
scale_x_discrete(labels = c("Bronze Pick Rate Rank", "Grandmaster Pick Rate Rank")) +
#Reverse the y axis scale to have the top heroes as the most picked and specify the scale to go from 1 to 32 in increments of 1
scale_y_reverse(breaks = 1:32) +
#Specify the size of the plot title and make it bold
theme(plot.title = element_text(size=16, face = "bold"),
#Specify the size of the tick labels on the x axis
axis.text.x = element_text(size=12),
#Specify the size of the axis titles and make them bold
axis.title = element_text(size=14,face = "bold"),
#Change the panelling on the plot to make it easy to compare across the visualisation
panel.grid.major.y = element_blank(),
#Remove the legend
legend.position = "none") +
#Specify the labels of the x and y axis
labs(x = "Division",
y = "Hero Rank",
#Specify the title and subtitle
title = "Overwatch Hero Pick Rate",
subtitle = "Heroes ranked by % pick rate in the lowest and highest divisions (Bronze and Grandmaster) over the last 3 months") +
#Specify the colours of the heroes lines to match the colour associated with each hero in Overwatch
scale_color_manual(values = c("#2178E9", "#67121D", "#3EA2CB", "#6E994D", "#F3B23A", "#FF7FD1", "#DDCCAC", "#04ADEF", "#84FE01", "#938848", "#D39308", "#8BEC22", "#C83C3C", "#9ADBF4", "#FFE16C", "#B3365D", "#BCC84A", "#2178E9", "#A49D86", "#AA958E", "#C19477", "#5DAB81", "#5D81EB", "#A07DC8", "#5CECFF", "#FF6200", "#F8911B", "#7878D4", "#8991A6", "#4D7883", "#F571A8", "#C79C00"))
#Display p2 visualisation
p2
#Save the visualisation
ggsave("visualisations/bump_chart.png")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) #load tidyverse
library(plotly)    #load plotly for interactive graphing
#Load and Display the Overwatch logo
img1 <- "images/overwatch_logo.png"
knitr::include_graphics(img1)
#Load and Display the Overwatch logo
img2 <- "images/overbuff_visualisation.png"
knitr::include_graphics(img2)
#Load the data set
df = read.csv("hero_stats_3_months.csv")
#Check the data is as expected
head(df, 3)
#Transform original dataset to include only the heroes and pick rates for each division
dfp1 <- df %>% select(1, 2, 6, 10, 14, 18, 22, 26)
#Create a variable that is the sum of pick rates across all divisions so that visualisaion 1 can be ordered as desired
dfp1$totalpick <- rowSums(dfp1[,c(2:8)])
#Transform dfp1 to arrange heroes by total pick rate to create the desired order in the visualisation
dfp1 <- dfp1 %>% arrange(desc(totalpick))
#Check the data is as expected
head(dfp1, 5)
#Set the plot space and add the first division
p1 <- plot_ly(dfp1, x = ~hero,
y = ~bronze_pick_rate,
name = "Bronze Pick Rate",
type = "bar",
width = 900,
height = 600,
#Set the colour of the first division and create a black line around each bar
marker = list(color = "#E0B5AC",
line = list(color = "#000000, 0.5)",
width = 1))) %>%
#Set the layout specifications of the visualisation
layout(title = "Hero Pick Rate by Division",
#Set the order of the heroes to be determined by the order they appear in the dataset
xaxis = list(categoryarray = ~hero,
categoryorder = "array",
#Set the x axis title and the angle and size of the labels for each hero
title = "Hero",
tickangle =270),
tickfont = list(size = 10),
#Set the y axis title, scale format, range and type of bar chart
yaxis = list(title = "Pick Rate",
tickformat = "%",
range = c(0, 0.70)),
barmode = "stack")
#Create a value containing the 6 divisions not yet plotted for use in a for loop
divplot <- colnames(dfp1[c(3:8)])
#Create a value for use in the add trace loop to set the colours for each division (colours match the exact hex codes that Overbuff assigned to each division)
colours <- c("#CAD6CC", "#EFEB8B", "#4E98BB", "#D9E8F3", "#EDA152", "#FEE072")
#Create a loop to add a trace for each of the remaining divisions
for(i in divplot){
p1 <- p1 %>% add_trace(x = dfp1[["hero"]],
y = dfp1[[i]],
#Replace "_" with " " and capitalise the division titles
name = gsub(x = i, pattern = "\\_", replacement = " ") %>% str_to_title(i),
#Change the colours of the divisions per the "colours" variable previously created
marker = list(color = colours[[match(i, divplot)]]))
}
#Display p1 visualisation
p1
#Save the visualisation
#Transform the original data set to only include the heroes and pick rates for the lowest and highest divisions
dfp2 <- df %>% select(1, 2, 26)
#Pivot the data from wide to long to facilitate the ranking of heroes
dfp2 <- gather(dfp2, division, pick_rate, bronze_pick_rate, grandmaster_pick_rate, factor_key = TRUE)
#Create a new variable that ranks heroes based on their pick rate in each division
dfp2 <- dfp2 %>%
group_by(division) %>%
arrange(division, desc(pick_rate), hero) %>%
mutate(rank = row_number()) %>%
ungroup()
#Check the data is as expected
head(dfp2, 5)
#Set the plot space
p2 <- ggplot(dfp2, aes(x = division, y = rank, group = hero)) +
#Add a line for each hero and make it slightly transparent for better visability of crossing lines
geom_line(aes(color = hero, alpha = 1), size = 2) +
#Add a point for each hero to better clarify the start and end point of each line
geom_point(aes(color = hero, alpha = 1), size = 4) +
#Add a white dot in the middle of each point
geom_point(color = "#FFFFFF", size = 1) +
#Create geom_text to facilitate adding heroes names by their Bronze pick rate ranking
geom_text(data = dfp2 %>% filter(division == "bronze_pick_rate"),
#Add heroes names by their Bronze pick rate ranking
aes(label = hero, x = 0.8) , hjust = 0.5,
#Make the font bold, black and a specific size
fontface = "bold", color = "#000000", size = 4) +
#Create geom_text to facilitate adding heroes names by their Grandmaster pick rate ranking
geom_text(data = dfp2 %>% filter(division == "grandmaster_pick_rate"),
#Add heroes names by their Grandmaster pick rate ranking
aes(label = hero, x = 2.2) , hjust = 0.5,
#Make the font bold, black and a specific size
fontface = "bold", color = "#000000", size = 4) +
#Specify tick labels on the x axis
scale_x_discrete(labels = c("Bronze Pick Rate Rank", "Grandmaster Pick Rate Rank")) +
#Reverse the y axis scale to have the top heroes as the most picked and specify the scale to go from 1 to 32 in increments of 1
scale_y_reverse(breaks = 1:32) +
#Specify the size of the plot title and make it bold
theme(plot.title = element_text(size=16, face = "bold"),
#Specify the size of the tick labels on the x axis
axis.text.x = element_text(size=12),
#Specify the size of the axis titles and make them bold
axis.title = element_text(size=14,face = "bold"),
#Change the panelling on the plot to make it easy to compare across the visualisation
panel.grid.major.y = element_blank(),
#Remove the legend
legend.position = "none") +
#Specify the labels of the x and y axis
labs(x = "Division",
y = "Hero Rank",
#Specify the title and subtitle
title = "Overwatch Hero Pick Rate",
subtitle = "Heroes ranked by % pick rate in the lowest and highest divisions (Bronze and Grandmaster) over the last 3 months") +
#Specify the colours of the heroes lines to match the colour associated with each hero in Overwatch
scale_color_manual(values = c("#2178E9", "#67121D", "#3EA2CB", "#6E994D", "#F3B23A", "#FF7FD1", "#DDCCAC", "#04ADEF", "#84FE01", "#938848", "#D39308", "#8BEC22", "#C83C3C", "#9ADBF4", "#FFE16C", "#B3365D", "#BCC84A", "#2178E9", "#A49D86", "#AA958E", "#C19477", "#5DAB81", "#5D81EB", "#A07DC8", "#5CECFF", "#FF6200", "#F8911B", "#7878D4", "#8991A6", "#4D7883", "#F571A8", "#C79C00"))
#Display p2 visualisation
p2
#Save the visualisation
ggsave("visualisations/bump_chart.png")
